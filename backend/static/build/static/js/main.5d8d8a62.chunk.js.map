{"version":3,"sources":["components/Header/Header.js","components/Main/Main.js","App.js","serviceWorker.js","index.js","components/Header/Header.module.css","components/Main/Main.module.css"],"names":["Header","className","classes","HeaderBar","Main","useState","ws","setWs","ip","setIp","echo","setEcho","serverResp","setServerResp","open","vertical","horizontal","state","setState","useEffect","console","log","initWebSocket","emit","on","message","MainContent","TextField","id","label","defaultValue","onChange","e","target","value","Button","variant","color","onClick","webSocket","Paper","elevation","Snackbar","anchorOrigin","onClose","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"oMAaeA,EATA,WAEX,OACI,yBAAKC,UAAWC,IAAQC,WACpB,0C,sFC+EGC,EA9EF,WAAO,IAAD,EACIC,mBAAS,MADb,mBACRC,EADQ,KACLC,EADK,OAEKF,mBAAS,IAFd,mBAERG,EAFQ,KAEJC,EAFI,OAGSJ,mBAAS,IAHlB,mBAGRK,EAHQ,KAGFC,EAHE,OAIqBN,mBAAS,IAJ9B,mBAIRO,EAJQ,KAIIC,EAJJ,OAKWR,mBAAS,CAC/BS,MAAM,EACNC,SAAU,MACVC,WAAY,WARD,mBAKRC,EALQ,KAKDC,EALC,KAWPH,EAA+BE,EAA/BF,SAAUC,EAAqBC,EAArBD,WAAYF,EAASG,EAATH,KAmB9BK,qBAAU,WACHb,IAECc,QAAQC,IAAI,oBACZH,EAAS,aAAEJ,MAAM,GAASG,IAE1BK,OAEN,CAAChB,IAEHa,qBAAU,WACHb,GACCA,EAAGiB,KAAK,eAAgBb,KAE9B,CAACA,IAEH,IAAMY,EAAgB,WAElBhB,EAAGkB,GAAG,mBAAmB,SAAAC,GACrBZ,EAAcY,OAItB,OACI,6BACA,yBAAKxB,UAAWC,IAAQwB,aACpB,6BACI,kBAACC,EAAA,EAAD,CAAWC,GAAG,gBAAgBC,MAAM,YAAYC,aAAc,gBAAiBC,SAxCpE,SAACC,GACpBvB,EAAMuB,EAAEC,OAAOC,UAwCP,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAjC/B,WAErB/B,EAAMgC,IAAU,UAAD,OAAW/B,EAAX,aA+BP,YAEJ,6BACI,kBAACmB,EAAA,EAAD,CAAWC,GAAG,YAAYE,aAAc,YAAaC,SAxCpC,SAACC,GAC1BrB,EAAQqB,EAAEC,OAAOC,WAyCb,kBAACM,EAAA,EAAD,CAAOC,UAAW,GACT7B,IAGb,kBAAC8B,EAAA,EAAD,CACIC,aAAc,CAAE5B,WAAUC,cAC1BF,KAAMA,EACN8B,QAzDY,WAChB1B,EAAS,2BAAKD,GAAN,IAAaH,MAAM,MAyDvBW,QAAQ,mBACRoB,IAAK9B,EAAWC,MCjEb8B,MAXf,WACE,OACE,yBAAK7C,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGY8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMvC,a,mBExI5BwC,EAAOC,QAAU,CAAC,UAAY,4B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,4B","file":"static/js/main.5d8d8a62.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Header.module.css';\n\nconst Header = () => {\n\n    return(\n        <div className={classes.HeaderBar}>\n            <div>DigiWeb</div>\n        </div>\n    )\n}\n\nexport default Header;","import React, { useState, useEffect, Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport webSocket from 'socket.io-client';\n\nimport classes from './Main.module.css';\n\nconst Main = () => {\n    const [ws,setWs] = useState(null)\n    const [ip, setIp] = useState('')\n    const [echo, setEcho] = useState('')\n    const [serverResp, setServerResp] = useState('')\n    const [state, setState] = useState({\n        open: false,\n        vertical: 'top',\n        horizontal: 'center',\n      });\n    \n    const { vertical, horizontal, open } = state;\n\n    const handleClose = () => {\n        setState({ ...state, open: false });\n    };\n\n    const changeIPHandle = (e) => {\n        setIp(e.target.value)\n    }\n\n    const changeEchoTextHandle = (e) => {\n        setEcho(e.target.value)\n    }\n\n    const connectWebSocket = () => {\n        //開啟\n        setWs(webSocket(`http://${ip}:8080`))\n    }\n\n    useEffect(()=>{\n        if(ws){\n            //連線成功在 console 中打印訊息\n            console.log('success connect!')\n            setState({ open: true, ...state });\n            //設定監聽\n            initWebSocket()\n        }\n    },[ws])\n\n    useEffect(()=>{\n        if(ws){\n            ws.emit('client_event', echo)\n        }\n    },[echo])\n\n    const initWebSocket = () => {\n        //對 getMessage 設定監聽，如果 server 有透過 getMessage 傳送訊息，將會在此被捕捉\n        ws.on('server_response', message => {\n            setServerResp(message)\n        })\n    }\n\n    return(\n        <div>\n        <div className={classes.MainContent}>\n            <div>\n                <TextField id=\"connection-ip\" label=\"Server IP\" defaultValue={'192.168.50.18'} onChange={changeIPHandle} />\n                <Button variant=\"contained\" color=\"primary\" onClick={connectWebSocket}>Connect</Button>\n            </div>\n            <div>\n                <TextField id=\"echo-test\" defaultValue={'echo test'} onChange={changeEchoTextHandle} />\n            </div>\n            <Paper elevation={3}>\n                    {serverResp}\n                </Paper>\n        </div>\n        <Snackbar\n            anchorOrigin={{ vertical, horizontal }}\n            open={open}\n            onClose={handleClose}\n            message=\"success connect!\"\n            key={vertical + horizontal}\n        />\n        </div>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Main />\n    </div>\n    \n  );\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderBar\":\"Header_HeaderBar__1Udn1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainContent\":\"Main_MainContent__2y5aU\"};"],"sourceRoot":""}